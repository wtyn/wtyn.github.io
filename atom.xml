<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>搬Code</title>
  
  <subtitle>生命短暂 多用Code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wangwanyu.gitee.io/"/>
  <updated>2020-02-20T11:51:28.335Z</updated>
  <id>https://wangwanyu.gitee.io/</id>
  
  <author>
    <name>搬Code</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://wangwanyu.gitee.io/2020/02/20/linux-chang-yong-ming-ling/"/>
    <id>https://wangwanyu.gitee.io/2020/02/20/linux-chang-yong-ming-ling/</id>
    <published>2020-02-20T11:14:00.000Z</published>
    <updated>2020-02-20T11:51:28.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些命令"><a href="#一些命令" class="headerlink" title="一些命令"></a>一些命令</h1><h2 id="文件夹建立软链接"><a href="#文件夹建立软链接" class="headerlink" title="文件夹建立软链接"></a>文件夹建立软链接</h2><pre class=" language-shell"><code class="language-shell">ln -s 源地址 目的地</code></pre><p>删除软链接</p><pre class=" language-shell"><code class="language-shell">rm -rf symbolic_name 注意不是rm -rf symbolic_name/</code></pre><h2 id="解决依赖关系"><a href="#解决依赖关系" class="headerlink" title="解决依赖关系"></a>解决依赖关系</h2><pre class=" language-shell"><code class="language-shell">sudo apt-get -f install </code></pre><h2 id="打开终端执行shell脚本"><a href="#打开终端执行shell脚本" class="headerlink" title="打开终端执行shell脚本"></a>打开终端执行shell脚本</h2><pre class=" language-shell"><code class="language-shell">gnome-terminal -t "title-name" -x bash -c "sh ./run.sh;exec bash;"-t 为打开终端的标题，便于区分，不要也可以。-x 后面的为要在打开的终端中执行的脚本，根据需要自己修改就行了。</code></pre><pre class=" language-shell"><code class="language-shell">gnome-terminal -t "title-name" -x zsh -c "sh ~/桌面/run.sh;exec zsh;"</code></pre><h2 id="apt与apt-get命令"><a href="#apt与apt-get命令" class="headerlink" title="apt与apt-get命令"></a>apt与apt-get命令</h2><table><thead><tr><th align="center">apt 命令</th><th align="center">取代的命令</th><th align="center">命令的功能</th></tr></thead><tbody><tr><td align="center">apt install</td><td align="center">apt-get install</td><td align="center">安装软件包</td></tr><tr><td align="center">apt remove</td><td align="center">apt-get remove</td><td align="center">移除软件包</td></tr><tr><td align="center">apt purge</td><td align="center">apt-get purge</td><td align="center">移除软件包及配置文件</td></tr><tr><td align="center">apt update</td><td align="center">apt-get update</td><td align="center">刷新存储库索引</td></tr><tr><td align="center">apt upgrade</td><td align="center">apt-get upgrade</td><td align="center">升级所有可升级的软件包</td></tr><tr><td align="center">apt autoremove</td><td align="center">apt-get autoremove</td><td align="center">自动删除不需要的包</td></tr><tr><td align="center">apt full-upgrade</td><td align="center">apt-get dist-upgrade</td><td align="center">在升级软件包时自动处理依赖关系</td></tr><tr><td align="center">apt search</td><td align="center">apt-cache search</td><td align="center">搜索应用程序</td></tr><tr><td align="center">apt show</td><td align="center">apt-cache show</td><td align="center">显示装细节</td></tr></tbody></table><p>apt 还有一些自己的命令：</p><table><thead><tr><th align="center">新的apt命令</th><th align="center">命令的功能</th></tr></thead><tbody><tr><td align="center">apt list</td><td align="center">列出包含条件的包（已安装，可升级等）</td></tr><tr><td align="center">apt edit-sources</td><td align="center">编辑源列表</td></tr></tbody></table><h2 id="查看占用端口"><a href="#查看占用端口" class="headerlink" title="查看占用端口"></a>查看占用端口</h2><pre class=" language-shell"><code class="language-shell">lsof -i:5010</code></pre><p>或</p><pre class=" language-shell"><code class="language-shell">查看端口使用情况，使用netstat命令。如果要查看已经连接的服务端口(ESTABLISHED) 　　　　　netstat -a如果是查看所有的服务端口(LISTEN，ESTABLISHED)      　netstat -ap查看8080端口，则可以结合grep命令：                                  netstat -ap | grep 8080若要停止使用这个端口的程序，使用kill +对应的pid即可         kill pid</code></pre><h2 id="查看GPU相关情况，包括占用的显存"><a href="#查看GPU相关情况，包括占用的显存" class="headerlink" title="查看GPU相关情况，包括占用的显存"></a>查看GPU相关情况，包括占用的显存</h2><pre class=" language-shell"><code class="language-shell">nvidia-smi</code></pre><h2 id="查看具体这个进程调用GPU的情况"><a href="#查看具体这个进程调用GPU的情况" class="headerlink" title="查看具体这个进程调用GPU的情况"></a>查看具体这个进程调用GPU的情况</h2><pre class=" language-shell"><code class="language-shell">pmap -d PID</code></pre><h2 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h2><pre class=" language-shell"><code class="language-shell">export ALL_PROXY=socks5://127.0.0.1:10808</code></pre><h1 id="dpkg命令"><a href="#dpkg命令" class="headerlink" title="dpkg命令"></a>dpkg命令</h1><h2 id="安装deb"><a href="#安装deb" class="headerlink" title="安装deb"></a>安装deb</h2><pre class=" language-shell"><code class="language-shell">dpkg -i xxx.deb# 强制安装sudo dpkg -i --force-all apt*.deb</code></pre><h2 id="查询安装的包-可以获取到软件名"><a href="#查询安装的包-可以获取到软件名" class="headerlink" title="查询安装的包,可以获取到软件名"></a>查询安装的包,可以获取到软件名</h2><pre class=" language-shell"><code class="language-shell">dpkg -l | grep xxx</code></pre><h2 id="查看软件相关信息"><a href="#查看软件相关信息" class="headerlink" title="查看软件相关信息"></a>查看软件相关信息</h2><pre class=" language-shell"><code class="language-shell">dpkg -l 软件名</code></pre><h2 id="查询安装路径"><a href="#查询安装路径" class="headerlink" title="查询安装路径"></a>查询安装路径</h2><pre class=" language-shell"><code class="language-shell">dpkg -L 软件名</code></pre><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><pre class=" language-shell"><code class="language-shell">sudo dpkg -r 软件名</code></pre><h1 id="Conda常用命令"><a href="#Conda常用命令" class="headerlink" title="Conda常用命令"></a>Conda常用命令</h1><h2 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h2><pre class=" language-shell"><code class="language-shell">conda info -e</code></pre><h2 id="创建一个环境"><a href="#创建一个环境" class="headerlink" title="创建一个环境"></a>创建一个环境</h2><pre class=" language-shell"><code class="language-shell">conda create -n "环境名" python=3.6</code></pre><h2 id="某个环境下安装包"><a href="#某个环境下安装包" class="headerlink" title="某个环境下安装包"></a>某个环境下安装包</h2><pre class=" language-shell"><code class="language-shell">conda install -n "环境名"  "包名"</code></pre><h2 id="删除某个环境"><a href="#删除某个环境" class="headerlink" title="删除某个环境"></a>删除某个环境</h2><pre class=" language-shell"><code class="language-shell">conda env remove -n "环境名"</code></pre><h2 id="显示当前添加的源"><a href="#显示当前添加的源" class="headerlink" title="显示当前添加的源"></a>显示当前添加的源</h2><pre class=" language-shell"><code class="language-shell">conda config --show channels</code></pre><h2 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h2><pre class=" language-shell"><code class="language-shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/# 其他可用的源conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --set show_channel_urls yes# conda config --set show_channel_urls yes的意思是从channel中安装包时显示channel的url，这样就可以知道包的安装来源了。</code></pre><pre class=" language-shell"><code class="language-shell"># 这里的意思是安装确认中，不默认yes，而是由我来决定conda config --set always_yes false</code></pre><h2 id="删除一个源"><a href="#删除一个源" class="headerlink" title="删除一个源"></a>删除一个源</h2><pre class=" language-shell"><code class="language-shell">conda config --remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</code></pre><h1 id="SSH命令"><a href="#SSH命令" class="headerlink" title="SSH命令"></a>SSH命令</h1><h2 id="查看登录日志"><a href="#查看登录日志" class="headerlink" title="查看登录日志"></a>查看登录日志</h2><pre class=" language-shell"><code class="language-shell">cat /var/log/auth.log</code></pre><h2 id="修改默认端口号"><a href="#修改默认端口号" class="headerlink" title="修改默认端口号"></a>修改默认端口号</h2><pre class=" language-shell"><code class="language-shell">vim /etc/ssh/sshd_config</code></pre><p>将Port修改为其他端口</p><h2 id="重启ssh服务"><a href="#重启ssh服务" class="headerlink" title="重启ssh服务"></a>重启ssh服务</h2><pre class=" language-shell"><code class="language-shell">/etc/init.d/ssh restart</code></pre><h1 id="tree命令"><a href="#tree命令" class="headerlink" title="tree命令"></a>tree命令</h1><p>以树状图列出目录的内容</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class=" language-shell"><code class="language-shell">tree (选项)（参数）</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="列出目录-private-第一级文件名"><a href="#列出目录-private-第一级文件名" class="headerlink" title="列出目录/private/ 第一级文件名"></a>列出目录<code>/private/</code> 第一级文件名</h3><pre class=" language-shell"><code class="language-shell">tree  /private/ -L 1</code></pre><h3 id="忽略文件夹"><a href="#忽略文件夹" class="headerlink" title="忽略文件夹"></a>忽略文件夹</h3><pre class=" language-shell"><code class="language-shell">tree -I node_modules # 忽略当前目录文件夹node_modulestree -P node_modules # 列出当前目录文件夹node_modules的目录结构tree -P node_modules -L 2 # 显示目录node_modules两层的目录树结构tree -L 2 > /home/www/tree.txt # 当前目录结果存到 tree.txt 文件中</code></pre><h3 id="忽略多个文件夹"><a href="#忽略多个文件夹" class="headerlink" title="忽略多个文件夹"></a>忽略多个文件夹</h3><pre class=" language-shell"><code class="language-shell">tree -I 'node_modules|icon|font' -L 2</code></pre><h3 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h3><pre class=" language-shell"><code class="language-shell">tree > tree.txt</code></pre><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="列表选项"><a href="#列表选项" class="headerlink" title="列表选项"></a>列表选项</h3><pre><code>-a            # 显示所有文件和目录。-d            # 先是目录名称而非文件。-l            # 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。-f            # 在每个文件或目录之前，显示完整的相对路径名称。-x            # 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。-L level      # 限制目录显示层级。-R            # Rerun tree when max dir level reached.-P pattern    # &lt;范本样式&gt; 只显示符合范本样式的文件和目录名称。-I pattern    # Do not list files that match the given pattern.--ignore-case # Ignore case when pattern matching.--matchdirs   # Include directory names in -P pattern matching.--noreport    # Turn off file/directory count at end of tree listing.--charset X   # Use charset X for terminal/HTML and indentation line output.--filelimit # # Do not descend dirs with more than # files in them.--timefmt &lt;f&gt; # Print and format time according to the format &lt;f&gt;.-o filename   # Output to file instead of stdout.</code></pre><h3 id="文件选项"><a href="#文件选项" class="headerlink" title="文件选项"></a>文件选项</h3><pre><code>-q            # 用“？”号取代控制字符，列出文件和目录名称。-N            # 直接列出文件和目录名称，包括控制字符。-Q            # Quote filenames with double quotes.-p            # 列出权限标示。-u            # 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。-g            # 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。-s            # 列出文件和目录大小。-h            # Print the size in a more human readable way.--si          # Like -h, but use in SI units (powers of 1000).-D            # 列出文件或目录的更改时间。-F            # 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上"*"，"/"，"@"，"|"号。--inodes      # Print inode number of each file.--device      # Print device ID number to which each file belongs.</code></pre><h3 id="排序选项"><a href="#排序选项" class="headerlink" title="排序选项"></a>排序选项</h3><pre><code>-v            # Sort files alphanumerically by version.-t            # 用文件和目录的更改时间排序。-c            # Sort files by last status change time.-U            # Leave files unsorted.-r            # Reverse the order of the sort.--dirsfirst   # List directories before files (-U disables).--sort X      # Select sort: name,version,size,mtime,ctime.</code></pre><h3 id="图形选项"><a href="#图形选项" class="headerlink" title="图形选项"></a>图形选项</h3><pre><code>-i            # 不以阶梯状列出文件和目录名称。-A            # 使用ASNI绘图字符显示树状图而非以ASCII字符组合。-S            # Print with CP437 (console) graphics indentation lines.-n            # Turn colorization off always (-C overrides).-C            # 在文件和目录清单加上色彩，便于区分各种类型。</code></pre><h3 id="XML-HTML-JSON选项"><a href="#XML-HTML-JSON选项" class="headerlink" title="XML / HTML / JSON选项"></a>XML / HTML / JSON选项</h3><pre><code>-X            # Prints out an XML representation of the tree.-J            # Prints out an JSON representation of the tree.-H baseHREF   # Prints out HTML format with baseHREF as top directory.-T string     # Replace the default HTML title and H1 header with string.--nolinks     # Turn off hyperlinks in HTML output.</code></pre><h3 id="杂项选项"><a href="#杂项选项" class="headerlink" title="杂项选项"></a>杂项选项</h3><pre><code>--version     # 输入版本信息。--help        # 打印使用帮助信息。--            # Options processing terminator.</code></pre><h1 id="卸载火狐浏览器的命令"><a href="#卸载火狐浏览器的命令" class="headerlink" title="卸载火狐浏览器的命令"></a>卸载火狐浏览器的命令</h1><pre class=" language-shell"><code class="language-shell">(base) wwu@GAN:~$ dpkg --get-selections | grep firefox</code></pre><pre><code>比如显示：firefox                        installfirefox-locale-en                installfirefox-locale-zh-hans                install</code></pre><pre class=" language-shell"><code class="language-shell">(base) wwu@GAN:~$ sudo apt-get purge firefox firefox-locale-en firefox-locale-zh-hans</code></pre><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="查询容器Id"><a href="#查询容器Id" class="headerlink" title="查询容器Id"></a>查询容器Id</h2><pre class=" language-shell"><code class="language-shell">sudo docker ps -a</code></pre><h2 id="启动某个镜像"><a href="#启动某个镜像" class="headerlink" title="启动某个镜像"></a>启动某个镜像</h2><pre class=" language-shell"><code class="language-shell">docker run -p 8000:8000 rasa/duckling</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell">sudo docker start "容器ID"</code></pre><h2 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h2><pre class=" language-shell"><code class="language-shell">sudo docker exec -it "容器I" bash</code></pre><h2 id="将主机的文件复制到容器中"><a href="#将主机的文件复制到容器中" class="headerlink" title="将主机的文件复制到容器中"></a>将主机的文件复制到容器中</h2><pre class=" language-shell"><code class="language-shell">sudo docker cp "主机目录" "容器ID:容器目录"</code></pre><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><pre class=" language-shell"><code class="language-shell">sudo docker images</code></pre><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><pre class=" language-shell"><code class="language-shell">sudo docker rmi [image]</code></pre><p>或</p><pre class=" language-shell"><code class="language-shell">sudo docker image rm [image]</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;一些命令&quot;&gt;&lt;a href=&quot;#一些命令&quot; class=&quot;headerlink&quot; title=&quot;一些命令&quot;&gt;&lt;/a&gt;一些命令&lt;/h1&gt;&lt;h2 id=&quot;文件夹建立软链接&quot;&gt;&lt;a href=&quot;#文件夹建立软链接&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
      <category term="linux" scheme="https://wangwanyu.gitee.io/categories/linux/"/>
    
    
      <category term="shell" scheme="https://wangwanyu.gitee.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>使用Ubuntu遇到问题的总结</title>
    <link href="https://wangwanyu.gitee.io/2020/02/19/ubuntu-shi-yong-zhong-de-wen-ti/"/>
    <id>https://wangwanyu.gitee.io/2020/02/19/ubuntu-shi-yong-zhong-de-wen-ti/</id>
    <published>2020-02-19T05:21:00.000Z</published>
    <updated>2020-02-20T07:49:38.443Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell无法使用source"><a href="#shell无法使用source" class="headerlink" title="shell无法使用source"></a>shell无法使用source</h1><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>shell脚本中source aaa.sh时提示 source: not found</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><pre class=" language-shell"><code class="language-shell"># 输入ls -l `which sh`# 提示/bin/sh -> dash# 这说明是用dash来进行解析的。</code></pre><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><pre class=" language-shell"><code class="language-shell"># 执行sudo dpkg-reconfigure dash# 在界面中选择no# 再次输入ls -l `which sh`# 提示: /bin/sh -> bash# 说明修改成,source可以使用了~</code></pre><h2 id="查看当前命令"><a href="#查看当前命令" class="headerlink" title="查看当前命令"></a>查看当前命令</h2><pre class=" language-shell"><code class="language-shell">ls -l `which sh`</code></pre><h1 id="激活conda-虚拟环境"><a href="#激活conda-虚拟环境" class="headerlink" title="激活conda 虚拟环境"></a>激活conda 虚拟环境</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>既然在命令行中可以通过conda activate tf激活tf的虚拟环境,那能不能写个脚本实现呢?</p><p>执行会报以下的错误:</p><blockquote><p>CommandNotFoundError: Your shell has not been properly configured to use ‘conda activate’.<br>To initialize your shell, run</p><p>$ conda init <shell_name></shell_name></p><p>Currently supported shells are:</p><p>bash<br>fish<br>tcsh<br>xonsh<br>zsh<br>powershell<br>See ‘conda init –help’ for more information and options.</p></blockquote><h2 id="解决办法-1"><a href="#解决办法-1" class="headerlink" title="解决办法"></a>解决办法</h2><p>打开 ~/.bashrc文件,去找到下面文字</p><pre class=" language-shell"><code class="language-shell"># !! Contents within this block are managed by 'conda init' !!__conda_setup="$('/opt/Miniconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"if [ $? -eq 0 ]; then    eval "$__conda_setup"else    if [ -f "/opt/Miniconda3/etc/profile.d/conda.sh" ]; then        . "/opt/Miniconda3/etc/profile.d/conda.sh"    else        export PATH="/opt/Miniconda3/bin:$PATH"    fifiunset __conda_setup</code></pre><p>将上述文字,复制粘贴到脚本的开头,便可以实现</p><h2 id="NOTE"><a href="#NOTE" class="headerlink" title="NOTE"></a>NOTE</h2><p>无法对外部产生影响,但“脚本空间”内部是激活了tf环境的，所以在con.sh脚本里的“conda activate tf” 语句后面，你仍旧可以写一些依赖于tf环境的语句或者执行依赖tf环境的其他什么脚本（比如py）</p><h1 id="在shell脚本中cd命令无效"><a href="#在shell脚本中cd命令无效" class="headerlink" title="在shell脚本中cd命令无效"></a>在shell脚本中cd命令无效</h1><h2 id="现象-1"><a href="#现象-1" class="headerlink" title="现象"></a>现象</h2><p>编写了一个shell脚本run.sh, run.sh中包含cd等命令,运行该run.sh时却发现目录切换不了</p><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>如果直接以<code>./run.sh</code>这种形式执行,终端会产生一个子shell,子shell去执行run.sh,在子shell中已经切换了目录,</p><p>`但是子shell一旦执行完,马上退出,子shell中的变量和操作全部都收回.回到终端根本就看不到这个过程的变化</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>添加<code>source</code>或<code>.</code>方式运行脚本</p><pre class=" language-shell"><code class="language-shell">source ./run.sh</code></pre><p>或</p><pre class=" language-shell"><code class="language-shell">. ./run.sh</code></pre><h1 id="apt命令无法使用"><a href="#apt命令无法使用" class="headerlink" title="apt命令无法使用"></a>apt命令无法使用</h1><p>强制安装</p><pre class=" language-shell"><code class="language-shell">sudo dpkg -i --force-all apt*.deb</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;shell无法使用source&quot;&gt;&lt;a href=&quot;#shell无法使用source&quot; class=&quot;headerlink&quot; title=&quot;shell无法使用source&quot;&gt;&lt;/a&gt;shell无法使用source&lt;/h1&gt;&lt;h2 id=&quot;现象&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="系统" scheme="https://wangwanyu.gitee.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Ubuntu" scheme="https://wangwanyu.gitee.io/tags/Ubuntu/"/>
    
      <category term="Problem" scheme="https://wangwanyu.gitee.io/tags/Problem/"/>
    
  </entry>
  
</feed>
